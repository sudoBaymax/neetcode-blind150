# Neetcode 150 - completed by Joseph Jatou
# 9/150 - Valid Anagram

class Solution:
    # 1) First, check if the lengths of the two strings are equal
    #    # If the lengths don't match, return False since they can't be anagrams
    # 2) Use two dictionaries (hashmaps) to count the frequency of characters in both strings
    #    # The keys will be characters and the values will be the counts of those characters
    # 3) Iterate through both strings and populate the dictionaries
    #    # For each character, update the dictionary with the frequency of that character
    # 4) Finally, compare the two dictionaries:
    #    # If they are equal, return True (they are anagrams)
    #    # Otherwise, return False (they are not anagrams)

    def isAnagram(self, s: str, t: str) -> bool:
        # Step 1: Check if the lengths of both strings are equal
        # If not, immediately return False
        if len(s) != len(t):
            return False
        
        # Step 2: Initialize dictionaries to store the frequency of characters
        count_s = {}  # To store frequencies of characters in s
        count_t = {}  # To store frequencies of characters in t
        
        # Step 3: Populate the dictionary for string s
        for char in s:
            count_s[char] = count_s.get(char, 0) + 1  # Increment the count of the character in count_s
        
        # Step 4: Populate the dictionary for string t
        for char in t:
            count_t[char] = count_t.get(char, 0) + 1  # Increment the count of the character in count_t
        
        # Step 5: Compare the two dictionaries. If they are equal, return True
        return count_s == count_t  # If both dictionaries are equal, they are anagrams

# Example usage
x = Solution()

# Example 1: Strings are anagrams
print(x.isAnagram('anagram', 'nagaram'))  # Output: True

# Example 2: Strings are not anagrams
print(x.isAnagram('rat', 'car'))  # Output: False
